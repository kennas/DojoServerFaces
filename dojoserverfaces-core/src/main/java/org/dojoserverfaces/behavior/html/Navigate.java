/*******************************************************************************
 * 	Copyright (c) 2011, The Dojo Foundation All Rights Reserved.
 * 	Available via Academic Free License >= 2.1 OR the modified BSD license.
 * 	see: http://dojotoolkit.org/license for details
 *******************************************************************************/
package org.dojoserverfaces.behavior.html;

import java.util.Iterator;

import javax.faces.application.ConfigurableNavigationHandler;
import javax.faces.application.NavigationCase;
import javax.faces.component.EditableValueHolder;
import javax.faces.component.UIComponent;
import javax.faces.component.UIForm;
import javax.faces.component.behavior.ClientBehaviorContext;
import javax.faces.context.FacesContext;

import org.dojoserverfaces.build.annotation.Attribute;
import org.dojoserverfaces.build.annotation.Behavior;
import org.dojoserverfaces.component.behavior.BehaviorBase;
import org.dojoserverfaces.util.Helper;

/**
 * This behavior has two uses. Given an "outcome" a url will be generated by the
 * Faces NaviationHanlder. If a target component is specified then that
 * component's href value will be set. Otherwise it will cause the client to
 * invoke a window GET request using the url generated. Parameters, values from
 * input fields, can be specified that will be appended to the url to be
 * requested.
 */
@Behavior
public class Navigate extends BehaviorBase {

    public Navigate() {
        super();
    }

    /**
     * class to help generate the navigate javascript
     */
    private class ScriptBuilder /* extends Helper */{
        private ClientBehaviorContext behaviorContext;
        // template string with param substitution template vars inserted
        private StringBuilder template;// = null;
        // substitutions array
        private StringBuilder subArray;// = null;
        private Integer subVar = new Integer(0);

        private Boolean addQuerySep = Boolean.FALSE;
        private Boolean addParamSep = Boolean.TRUE;
        private Boolean addComma = Boolean.FALSE;

        public ScriptBuilder(ClientBehaviorContext behaviorContext) {
            this.behaviorContext = behaviorContext;
            String href = buildHref(behaviorContext.getFacesContext());
            template = new StringBuilder(href);
            if (href.contains("?")) {
                addQuerySep = Boolean.FALSE;
                addParamSep = Boolean.TRUE; // we'll need to add & right away
            }
            else {
                addQuerySep = Boolean.TRUE;
                addParamSep = Boolean.FALSE; // don't add & till after first
                                             // query arg
            }
        }

        private String buildHref(FacesContext context) {
            ConfigurableNavigationHandler navigationHandler = (ConfigurableNavigationHandler) context
                    .getApplication().getNavigationHandler();
            String outcome = getOutcome();
            if (null == outcome) {
                // just return to same page
                outcome = context.getViewRoot().getViewId();
            }
            NavigationCase navigationCase = navigationHandler
                    .getNavigationCase(context, null, outcome);

            if (null == navigationCase) {
                log("invalid outcome");
                return null;
            }
            // TODO should we enforce that nav rule must be a "redirect"
            return context
                    .getApplication()
                    .getViewHandler()
                    .getBookmarkableURL(context,
                            navigationCase.getToViewId(context),
                            navigationCase.getParameters(),
                            navigationCase.isIncludeViewParams());
        }

        public void addParam(String name, String value) {
            if (null == subArray) {
                subArray = new StringBuilder("[");
            }
            if (addQuerySep.booleanValue()) {
                template.append('?');
                addQuerySep = Boolean.FALSE;
            }
            if (addParamSep.booleanValue()) {
                template.append('&');
            }
            addParamSep = Boolean.TRUE;
            template.append(name).append("=\\${")
                    .append(String.valueOf(subVar++)).append('}');
            // update substitution values
            if (addComma.booleanValue()) {
                subArray.append(",");
            }
            subArray.append(value);
            addComma = Boolean.TRUE;
        }

        public void addFieldValueParam(UIComponent component) {
            StringBuilder value = new StringBuilder();
            appendGetElementAttr(value, component, "value");
            addParam(component.getId(), value.toString());
        }

        public void addEditableValueHolders(UIComponent component) {
            // all EditableValueHolder components are to be params
            for (Iterator<UIComponent> iter = component.getFacetsAndChildren(); iter
                    .hasNext();) {
                UIComponent child = iter.next();
                if (child instanceof EditableValueHolder) {
                    addFieldValueParam(child);
                }
                else {
                    addEditableValueHolders(component);
                }
            }
        }

        public String getScript() {
            String href;
            if (null == subArray) {
                href = Helper.quote(template.toString());
            }
            else {
                StringBuilder script = new StringBuilder();
                subArray.append(']'); // close substitutions json block
                script.append("dojo.string.substitute(\"")
                        .append(template.toString()).append("\",")
                        .append(subArray.toString()).append(")");
                href = script.toString();
            }
            StringBuilder script = new StringBuilder();
            if (null != target) {
                UIComponent component = findComponent(behaviorContext, target);
                if (null == component) {
                    logComponentNotFound(target);
                }
                else {
                    appendGetElement(script, component).append(".set('href',")
                            .append(href).append(");");
                    // TODO: maybe more carefully quote href
                }
            }
            else {
                // else goto the new url
                script.append("window.location.href=").append(href).append(";")
                        .append("return false;");
            }
            return script.toString();
        }
    }

    @Override
    public String getScript(ClientBehaviorContext behaviorContext) {
        ScriptBuilder builder = new ScriptBuilder(behaviorContext);
        if (null != params) {
            String[] tokens = (null != params) ? params.split("\\s") : null;
            for (String token : tokens) {
                if (PARAM_THIS.equals(token)) {
                    builder.addFieldValueParam(behaviorContext.getComponent());
                }
                else if (PARAM_FORM.equals(token)) {
                    UIComponent component = behaviorContext.getComponent();
                    // find parent form and process children
                    do {
                        if (component instanceof UIForm) {
                            builder.addEditableValueHolders(component);
                            break;
                        }
                        else {
                            component = component.getParent();
                        }
                    } while (null != component);
                }
                else if (PARAM_ALL.equals(token)) {
                    builder.addEditableValueHolders(behaviorContext
                            .getFacesContext().getViewRoot());
                }
                else if (PARAM_NONE.equals(token)) {
                    // do nothing
                }
                else if (token.startsWith(PARAM_EVENT)) {
                    int i = token.lastIndexOf('.');
                    if (i < 0) {
                        // param name will be "event" and event.value will be the value
                        builder.addParam("event", "event.value");
                    }
                    else {
                        // param name will be name of event property being retrieved
                        String name = token.substring(++i);
                        i = name.lastIndexOf('(');
                        if (i > 0) {
                            name = (name.startsWith("get")) ? name.substring(3,
                                    i) : name.substring(0, i);
                        }
                        builder.addParam(name, token.substring(1));
                    }
                }
                else {
                    UIComponent target = behaviorContext.getComponent()
                            .findComponent(token);
                    if (null != target) {
                        builder.addFieldValueParam(target);
                    }
                }
            }
        }
        return builder.getScript();
    }

    private String params = null;

    /**
     * A comma separate list of component ids, whose current value, will be
     * appended to the url. Legal values include: @this - the value of the
     * triggering component, @form - all input components of the parent form, @all
     * - all input components in the view and @event - where param name will be event
     * and the value will be event.value (the prompt behaviors sets this).
     */
    @Attribute
    public String getParams() {
        return params;
    }

    public void setParams(String params) {
        this.params = params;
    }

    private String outcome = null;

    /**
     * The navigation rule outcome. If not set then the current page will be
     * redisplayed.
     */
    @Attribute
    public String getOutcome() {
        return outcome;
    }

    public void setOutcome(String outcome) {
        this.outcome = outcome;
    }

    private String target = null;

    /**
     * The id of a content component whose href value will be set. If this is
     * not set then the window href will be set. @this is a legal value
     */
    @Attribute
    public String getTarget() {
        return target;
    }

    public void setTarget(String target) {
        this.target = target;
    }

    // // private Boolean includeViewParams = true;
    // // public void setIncludeViewParams(Boolean includeViewParams) {
    // // this.includeViewParams = includeViewParams;
    // // }
    // //
    // // public Boolean getIsIncludeViewParams() {
    // // return includeViewParams;
    // // }
}